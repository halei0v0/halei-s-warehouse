name: Update Real Download Count
on:
  schedule:
    - cron: '0 * * * *' # 每小时自动统计
  workflow_dispatch:

jobs:
  update-real-count:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get release assets download count
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node <<'EOF'
          const fs = require('fs');
          const https = require('https');

          const owner = process.env.GITHUB_REPOSITORY.split('/')[0];
          const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
          const options = {
            hostname: 'api.github.com',
            path: `/repos/${owner}/${repo}/releases/latest`,
            headers: {
              'User-Agent': 'node.js',
              'Authorization': `token ${process.env.GH_TOKEN}`
            }
          };

          https.get(options, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
              const release = JSON.parse(data);
              const counts = {};
              if (release.assets) {
                release.assets.forEach(asset => {
                  counts[asset.name] = asset.download_count;
                });
              }
              fs.writeFileSync('count.json', JSON.stringify(counts, null, 2));
            });
          }).on('error', (e) => {
            console.error(e);
            process.exit(1);
          });
          EOF

      - name: Commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add count.json
          git commit -m "Update real download count"
          git push

      - name: Sync real download counts to webpage
        run: |
          node <<'EOF'
          async function fetchRealDownloadCounts() {
            try {
              // 仓库地址和 count.json 路径
              const url = 'https://raw.githubusercontent.com/halei0v0/warehouse/main/count.json';
              const response = await fetch(url);
              if (!response.ok) throw new Error('无法获取真实下载量');
              const counts = await response.json();

              // 更新页面所有下载量
              document.querySelectorAll('.download-item').forEach(item => {
                const assetUrl = item.getAttribute('data-asset-url');
                if (assetUrl && counts[assetUrl] !== undefined) {
                  const countEl = item.querySelector('.download-count');
                  if (countEl) countEl.textContent = counts[assetUrl];
                }
              });
              // 更新每个release的总下载量
              allReleasesCache.forEach(release => {
                const total = release.assets.reduce((sum, asset) => sum + (counts[asset.browser_download_url] || 0), 0);
                const els = document.querySelectorAll(`.release-download-count[data-release-tag="${escapeHtml(release.tag_name)}"]`);
                els.forEach(el => el.textContent = total);
              });
            } catch (error) {
              console.error('下载量同步失败:', error);
            }
          }

          // 在初始化时调用
          async function initialize() {
            initTheme();
            try {
              await Promise.all([
                fetchAnnouncement(),
                fetchReleases(),
                fetchDiscussions(),
                fetchGitHubStats()
              ]);
              await fetchRealDownloadCounts(); // 新增：同步真实下载量
            } catch (error) {
              showErrorNotification(`初始化失败: ${error.message}`);
            }
          }

          initialize();
          EOF
